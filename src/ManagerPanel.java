
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Vans
 */
public class ManagerPanel extends javax.swing.JFrame {

    /**
     * Creates new form AdminPanel
     */
    public ManagerPanel() {
        initComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        calTSell = new javax.swing.JButton();
        calMSell = new javax.swing.JButton();
        tsell = new javax.swing.JTextField();
        msell = new javax.swing.JTextField();
        search_id = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        month = new javax.swing.JComboBox<>();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Search By T_ID");

        calTSell.setText("Today Total Sell");
        calTSell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calTSellActionPerformed(evt);
            }
        });

        calMSell.setText("Current Month Sell");
        calMSell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calMSellActionPerformed(evt);
            }
        });

        tsell.setEnabled(false);
        tsell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tsellActionPerformed(evt);
            }
        });

        msell.setEnabled(false);
        msell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msellActionPerformed(evt);
            }
        });

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        month.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Current","January", "February", "March", "April","May","June","July","August","September","October","November","December" }));
        month.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(search_id, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(search))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(calTSell)
                            .addComponent(tsell, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(78, 78, 78)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(month, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(msell))
                                .addComponent(calMSell, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calTSell)
                    .addComponent(calMSell))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tsell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search))
                .addGap(70, 70, 70))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void calMSellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calMSellActionPerformed
             long millis=System.currentTimeMillis();  
        java.sql.Date date=new java.sql.Date(millis); 
             @SuppressWarnings("deprecation")
             java.sql.Date date1=new java.sql.Date(millis);
             date1.setDate(1);
             int indexOfSelectedMonth=month.getSelectedIndex();
             if(indexOfSelectedMonth!=0)
             {
             if(indexOfSelectedMonth<date1.getMonth())
             {
                 date1.setMonth(indexOfSelectedMonth+2);
                 date.setMonth(indexOfSelectedMonth+2);
                 date.setDate(30);
             }
             }
        //System.out.println(date+"\n"+date1);    
        //java.sql.Timestamp time=new java.sql.Timestamp(millis);
        //System.out.println(time);
        double sum=0.0;
        try
            {
                stmt=conn.createStatement();
                query="select sum(AMOUNT) from "+ trans_table+" where date1 between ? and ? ";
                preparedStatement = conn.prepareStatement(query);
                preparedStatement.setString(1, date1.toString());
                preparedStatement.setString(2, date.toString());
                ResultSet rs=preparedStatement.executeQuery();
                while(rs.next())
                        {
                          sum+=(rs.getDouble(1));
                        }
                msell.setText(String.valueOf(sum));
                //System.out.println(sum);
                stmt.close();
            }
            catch(Exception exp)
            {
                exp.printStackTrace();
                System.out.println("some problem in Accessing data");
            }
        // TODO add your handling code here:
    }//GEN-LAST:event_calMSellActionPerformed

    private void msellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msellActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_msellActionPerformed

    private void tsellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tsellActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tsellActionPerformed

    private void calTSellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calTSellActionPerformed
        // TODO add your handling code here:
        long millis=System.currentTimeMillis();  
        java.sql.Date date=new java.sql.Date(millis);  
        //System.out.println(date);    
        //java.sql.Timestamp time=new java.sql.Timestamp(millis);
        //System.out.println(time);
        double sum=0.0;
        try
            {
                stmt=conn.createStatement();
                query="select sum(AMOUNT) from "+ trans_table+" where date1=?";
                preparedStatement = conn.prepareStatement(query);
                preparedStatement.setString(1, date.toString());
                ResultSet rs=preparedStatement.executeQuery();
                while(rs.next())
                        {
                          sum+=(rs.getDouble(1));
                        }
                tsell.setText(String.valueOf(sum));
                //System.out.println(sum);
                stmt.close();
            }
            catch(Exception exp)
            {
                exp.printStackTrace();
                System.out.println("some problem in Accessing data");
            }
    }//GEN-LAST:event_calTSellActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        String s=search_id.getText();
        Object data=null;
        query="select data from RECORD where T_ID = ? ";
        try{
        stmt=conn.createStatement();
        preparedStatement=conn.prepareStatement(query);
        preparedStatement.setString(1,(s));
        ResultSet rs=preparedStatement.executeQuery();
        while(rs.next())
        {
            data=rs.getObject(1);
            System.out.println(data);
        }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            System.out.printf("Problem");
        }
        System.out.println(data==null?"null data":"notnull data");
        // TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed

    private void monthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthActionPerformed
        // TODO add your handling code here:
        calMSell.setText(month.getSelectedItem().toString()+" Month's Total Sell");
    }//GEN-LAST:event_monthActionPerformed

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calMSell;
    private javax.swing.JButton calTSell;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox<String> month;
    private javax.swing.JTextField msell;
    private javax.swing.JButton search;
    private javax.swing.JTextField search_id;
    private javax.swing.JTextField tsell;
    // End of variables declaration//GEN-END:variables
private static String dbURL = "jdbc:derby://localhost:1527/Inventory;create=true;user=vans;password=vans";
private static String record_table = "Record";
private static String trans_table="TRANS";
    // jdbc Connection
private static Connection conn=null;
private static Statement stmt = null;
private static PreparedStatement preparedStatement = null;
private static String query=null;
private static String trans_id="";
static
{
    try
        {
            Class.forName("org.apache.derby.jdbc.ClientDriver").newInstance();
            //Get a connection
            conn = DriverManager.getConnection(dbURL); 
        }
        catch (Exception except)
        {
            except.printStackTrace();
        }
}
}
