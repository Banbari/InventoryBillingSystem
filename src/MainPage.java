
import java.math.RoundingMode;
import java.text.DecimalFormat;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.sql.*;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JTable;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Vans
 */
public class MainPage extends javax.swing.JFrame implements TableModelListener{

    /**
     * Creates new form MainPage
     */
    @Override
    public void tableChanged(TableModelEvent e) {
        TableModel model = (TableModel)e.getSource();
        int row = e.getFirstRow();
        int column = e.getColumn();
        if(row!=-1 && column!=-1)
        {
        String columnName = model.getColumnName(column);
        Object data = model.getValueAt(row, column);
        if(columnName.equals("Quantity"))
        {
            double total_sum=
            (Integer)(data)*(Double)model.getValueAt(row,column-1);
            double prev_sum=((Double)model.getValueAt(row,4))==null?0:(Double)model.getValueAt(row,4);
            double g_total=Double.parseDouble(total.getText().substring(7))-prev_sum+total_sum;
            total.setText("Total : "+df.format(g_total).toString());
            amount.setText(df.format(g_total).toString());
            model.setValueAt(Double.parseDouble(df.format(total_sum)),row,4);
        }
        else if(columnName.equals("Item Code"))
        {
            String i_name="";
            double price=0.0;
            String val=(String)model.getValueAt(row, column);
            try
            {
                stmt=conn.createStatement();
                query="select item_name,price from "+input_table+" where item_code = ?";
                preparedStatement = conn.prepareStatement(query);
                preparedStatement.setString(1,val);
                ResultSet results = preparedStatement.executeQuery();
            while(results.next())
            {
                i_name = results.getString(1);
                price = results.getDouble(2);
            }
            results.close();
            stmt.close();
            }
            catch(Exception exp)
            {
                System.out.println("some problem "+val);
            }
            //String s1="a";
            //Double p=200.3045;
            model.setValueAt(i_name,row,1);
            model.setValueAt(price,row,2);
        }
        else if(columnName.equals("Total"))
        {
            DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
        model1.addRow(new Object[]{null,null,null,null,null});
        /*double sum=0.0;
        int n=model.getRowCount();
        for(int i=0;i<n;i++)
        {
            sum=sum+((Double)model.getValueAt(i,4)).doubleValue();
        }
        total.setText("Total : "+Double.toString(sum));*/
        model1.fireTableRowsInserted(0,model.getRowCount()+1);
        }
        }
    }
    public MainPage() {
        initComponents();
        df = new DecimalFormat("#.##");
        df.setRoundingMode(RoundingMode.CEILING);
        jTable1.getModel().addTableModelListener(this);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        txn_id = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        total = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        cash = new javax.swing.JCheckBox();
        card = new javax.swing.JCheckBox();
        card_no = new javax.swing.JTextField();
        amount = new javax.swing.JTextField();
        clear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 153, 153));

        txn_id.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        txn_id.setText("Payment Type");

        jButton1.setBackground(new java.awt.Color(102, 255, 51));
        jButton1.setForeground(new java.awt.Color(0, 204, 204));
        jButton1.setText("Insert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        total.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        total.setText("Total : 0");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Item Code", "Name", "Price", "Quantity", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(204, 102, 255));
        jTable1.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jTable1.setSelectionForeground(new java.awt.Color(40, 216, 83));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton2.setBackground(new java.awt.Color(153, 153, 255));
        jButton2.setForeground(new java.awt.Color(0, 153, 51));
        jButton2.setText("Manager Panel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(153, 255, 153));
        jButton3.setForeground(new java.awt.Color(204, 153, 0));
        jButton3.setText("Generate Bill");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        cash.setSelected(true);
        cash.setText("Cash");
        cash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashActionPerformed(evt);
            }
        });

        card.setText("Credit / Debit Card");
        card.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardActionPerformed(evt);
            }
        });

        card_no.setEditable(false);
        card_no.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card_noActionPerformed(evt);
            }
        });

        amount.setEditable(false);
        amount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountActionPerformed(evt);
            }
        });

        clear.setBackground(new java.awt.Color(255, 51, 51));
        clear.setForeground(new java.awt.Color(255, 204, 102));
        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txn_id, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(card)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(card_no, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(cash)
                        .addGap(68, 68, 68)
                        .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txn_id)
                            .addComponent(jButton1)
                            .addComponent(total, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(card)
                            .addComponent(card_no, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cash)
                            .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(clear))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.addRow(new Object[]{null,null,null,null,null});
        /*double sum=0.0;
        int n=model.getRowCount();
        for(int i=0;i<n;i++)
        {
            sum=sum+((Double)model.getValueAt(i,4)).doubleValue();
        }
        total.setText("Total : "+Double.toString(sum));*/
        model.fireTableRowsInserted(0,model.getRowCount()+1);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
         
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        long millis=System.currentTimeMillis();  
        java.sql.Date date=new java.sql.Date(millis);  
        //System.out.println(date);    
        trans_id=String.valueOf(millis)+(++customer_number);
        
        payment_id=date.toString()+(++payment_number);
        String payment_type="";
        if(cash.isSelected())
            payment_type="Cash";
        if(card.isSelected())
        {
            if(payment_type.equals("Cash"))
            payment_type=payment_type+" + Card";
            else
                payment_type="Card";
        }
        java.sql.Timestamp time=new java.sql.Timestamp(millis);
        try
            {
                stmt=conn.createStatement();
                query="insert into "+output_table+" values (?,?,?,?,?)";
                preparedStatement = conn.prepareStatement(query);
                preparedStatement.setString(1,trans_id);
                preparedStatement.setString(2,time.toString());
                preparedStatement.setString(3,total.getText().substring(7));
                preparedStatement.setString(4,payment_id);
                preparedStatement.setString(5,payment_type);
                preparedStatement.executeUpdate();
                query="insert into Record values (?,?)";
                preparedStatement = conn.prepareStatement(query);
                preparedStatement.setString(1,trans_id);
                preparedStatement.setObject(2,jTable1);
                
                stmt.close();
            }
            catch(Exception exp)
            {
                System.out.println("some problem in Saving data");
            }
        //System.out.println(trans_id);
            int size=jTable1.getRowCount();
            //Object[][] data=new Object[size][2];
            Vector<Vector<Object>> v=new Vector<>();
            for(int i=0;i<size;i++)
            {
                if(jTable1.getValueAt(i,0)==null)
                    continue;
                Vector<Object> data=new Vector<>(2);
                data.add((String)jTable1.getValueAt(i,1));
                data.add((""+((Double)jTable1.getValueAt(i,2)).toString()+" X "+((Integer)jTable1.getValueAt(i,3)).toString()+" = "+((Double)jTable1.getValueAt(i,4)).toString()));
                v.add(data);
            }
        try{
            
                
            
            Vector<String> cols=new Vector<>();
            cols.add("Name");
            cols.add("Total");
            JTable jTable2;
            jTable2 = new JTable(v,cols);
            jTable2.setSize(jTable1.getSize());
            /*jTable2.setModel(new DefaultTableModelImpl(
            v,
            cols));*/
            jTable2.setGridColor(new java.awt.Color(204, 102, 255));
        jTable2.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jTable2.setSelectionForeground(new java.awt.Color(40, 216, 83));
        ((DefaultTableModel)jTable2.getModel()).addRow(new Object[]{"Total",total.getText().substring(7)+" /-"});
            //System.out.println(jTable2+"\n"+jTable1);
            jTable2.print(); 
        }
        catch(Exception e)
        {
            System.out.println("error");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void cashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashActionPerformed

     if(!cash.isSelected())
     {
         amount.setText("0");
         amount.setEnabled(false);
     }
     else
     {
         amount.setEnabled(true);
         amount.setEditable(true);
     }
    }//GEN-LAST:event_cashActionPerformed

    private void card_noActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card_noActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_card_noActionPerformed

    private void cardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardActionPerformed
        // TODO add your handling code here:
        if(card.isSelected())
        {
            card_no.setEditable(true);
            amount.setEditable(true);
        }
        else
        {
            card_no.setText("");
            card_no.setEditable(false);
            //amount.setEditable(false);
        }
    }//GEN-LAST:event_cardActionPerformed

    private void amountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new ManagerPanel();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Item Code", "Name", "Price", "Quantity", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
    }//GEN-LAST:event_clearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage().setVisible(true);
            }
        });
    }
    private static void shutdown()
    {
        try
        {
            if (stmt != null)
            {
                stmt.close();
            }
            if (conn != null)
            {
                DriverManager.getConnection(dbURL + ";shutdown=true");
                conn.close();
            }           
        }
        catch (SQLException sqlExcept)
        {
            
        }
}
    @Override
    public void finalize() throws Throwable
{
    
        shutdown();
        super.finalize();
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amount;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JCheckBox card;
    private javax.swing.JTextField card_no;
    private javax.swing.JCheckBox cash;
    private javax.swing.JButton clear;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel total;
    private javax.swing.JLabel txn_id;
    // End of variables declaration//GEN-END:variables
DecimalFormat df ;
private static String dbURL = "jdbc:derby://localhost:1527/Inventory;create=true;user=vans;password=vans";
private static String input_table = "MASTER";
private static String output_table="TRANS";
    // jdbc Connection
private static Connection conn=null;
private static Statement stmt = null;
private static PreparedStatement preparedStatement = null;
private static String query=null;
private static long customer_number=0;
private static String trans_id="";
private static long payment_number=0;
private static String payment_id="";
static
{
    try
        {
            Class.forName("org.apache.derby.jdbc.ClientDriver").newInstance();
            //Get a connection
            conn = DriverManager.getConnection(dbURL); 
        }
        catch (Exception except)
        {
            except.printStackTrace();
        }
}

   
/* private class DefaultTableModelImpl extends DefaultTableModel {

        public DefaultTableModelImpl(Object[][] data, Object[] columnNames) {
            super(data, columnNames);
        }
        Class[] types = new Class [] {
            java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
        };
        boolean[] canEdit = new boolean [] {
            true, false, false, true, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    }*/
}
